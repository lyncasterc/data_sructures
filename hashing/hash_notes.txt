- Analysis of hashes are based on loading factor.
 - loading factor = n/size -> written as lambda
 - lambda is the number of items in the linked list 



Chaining:
    - h(x) = x % 10 -> this isnt the only function you can use 
    - each element in hash table is a linked list
    - if there is a collision, the linked list will be extended
    - avg succesful search is 1 + lambda/2
    - unsuccessfull search is 1 + lambda

    - Problem: with h(x) = x % 10
        - if all the numbers end in the same digiit, they will be inserted at the same key
        - this would mean that the lamba assertion fails 
        - to choose proper hash function, we need an idea of the keys we are working with

Linear probing:
    - if h(x) = x % 10, then whenever a collision occurs, we move the index by 1 and check again.
    - cyclic, it wraps around if there is a collision at the end
    - loading factor should not be more than 0.5
    - avg successful search is (1/lambda * ln(1/(1-lambda)))
    - avg unsuccessful search is (1/(1-lambda)

    - Downsides:
        - only half of the hash table is used, so space is wasted
        - primary clustering of keys

    - Deleting:
        - if key is found, rehash all the remaining elements
        - deleting is not recommended in linear probing. 
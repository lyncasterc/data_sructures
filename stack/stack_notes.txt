Stack:
    - collection of elements following LIFO (last in, first out).
    -ex: 6-5-4-3-2-1 
        - 6 was inserted last, but will be first to come out.
    
    - can be visualized as being vertical, like a stack of books.
    
    - stack as an ADT:
        - space for storing elements
        - pointer for top most elements

        - operations:
            - pop(val)
            - push()
            - peek(index) ->looking at value
            - stack_top() -> looking at top value
            - is_empty
            - is_full
    
- Implementation:
    - array:
        - need fixed size array
        - size of array 
        - pointer to recently inserted element
        
        0   1   2  3  4 
        [10, 15, 7,  ,  ] <-- insert this side
                 ^top

        - when stack is empty, top pointer is -1
        
        - when full, top pointer is size - 1
    
- Paranthesis matching:
    - a common problem/interview problem

    ((a+b)*(c-d)) - brackets balanced

    (((a+b)*(c-d)) - extra opening bracket at beginning, stack will not be empty

    ((a+b)*(c-d))) - extra closing at end, stack will be empty with closing bracket remaining  

    - iterate through the expression:
        - for each character, check if it is opening or closing bracket
        - if opening, push bracket to stack
        - if closing, check if stack is empty.
            - if not, pop from stack 
            - if so,  brackets are not balanced.
        - at the end, the stack should be empty.
        - if not empty, brackets are not balanced.

    
    - program does not check if the paranthesis' are proper, only checks if they're balanced.

- Infix to Postfix conversion:
    - infix: a + b

    - prefix: +ab

    - postfix: ab+

    - infix to postfix helps for solving expression in one scan

    -ex: (a+b)* (c-d)
        ab+cd-* <- postfix form
        when operator encountered, perform on previous two operands

    - stack method 1:
        - scan expression.
            - if operand, send to postfix
            - if operator, check if stack is empty.
                - if empty, push
                - else compare precendences of operator in stack and scanned operator
                    - if precedence of stack operator lower, then push
                    - else, pop and sent to postfix 
    
    - stack method 2: (variables have higher precedence)
        - scan expression:
            - if stack is empty, push
            - else:
                - while top of stack has higher/equal precendence, pop and send to post fix
                - else, push
        - pop out remaining objects and send to postfix
     